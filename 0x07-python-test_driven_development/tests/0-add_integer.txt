The ``add_integer`` module
======================

Using ``add_integer``
---------------------

This function tests how two integers are to be added.
First import add_integer from the ''0-add_integer'' module:

``add_integer(...)`` returns the addition of two integers
Now use it:

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5

::

	>>> add_integer(4, -3)
	1

The function also works with floating-point

::

	>>> add_integer(4.0, 2.0)
	6

The float numbers are casted to integers before they can be added

::

	>>> add_integer(3.8, 0.4)
	3

::

	>>> add_integer(-3.4, -1.7)
	-4

Floating-point and non-floating-point can be combined

::

	>>> add_integer(4.4, -6)
	-2

The second argument (b) is optional - it has a default value = 98

::

	>>> add_integer(12)
	110

Non-numerals
============

''add_integer()'' function expects to have both arguments to be integers of floats
If one of the argument isn't either integer or float, raise a TypeError

::

	>>> add_integer("String", 4)
	Traceback (most recent call last)
	TypeError: a must be an integer

::

	>>> add_integer(5, "String_here")
	Traceback (most recent call last)
	TypeError: b must be an integer

::

	>>> add_integer(None)
	Traceback (most recent call last)
	TypeError: a must be an integer

::

	>>> add_integer(3.4, None)
	Traceback (most recent call last)
	TypeError: b must be an integer

if a and b are neither float or integers, the TypeError message
should be printed for the first argument

::
	>>> add_integer("me", "you")
	Traceback (most recent call last)
	TypeError: a must be an integer
